public class SymmetricDifferenceCalculator
{
    public static List<T> SymmetricDifference<T>(params T[][] arrays)
    {
        if (arrays.Length == 0) return new List<T>();
        if (arrays.Length == 1) return arrays[0].ToList();

        var result = ComputeSymmetricDifference(arrays[0], arrays[1]);

        for (int i = 2; i < arrays.Length; i++)
        {
            result = ComputeSymmetricDifference(result.ToArray(), arrays[i]);
        }

        return result;
    }

    private static List<T> ComputeSymmetricDifference<T>(T[] array1, T[] array2)
    {
        var set1 = new HashSet<T>(array1);
        var set2 = new HashSet<T>(array2);

        var symmetricDifference = new List<T>();

        foreach (var item in set1)
        {
            if (!set2.Contains(item))
            {
                symmetricDifference.Add(item);
            }
        }

        foreach (var item in set2)
        {
            if (!set1.Contains(item))
            {
                symmetricDifference.Add(item);
            }
        }

        return symmetricDifference;
    }
}

// Example usage
public class Program
{
    public static void Main()
    {
        var result = SymmetricDifferenceCalculator.SymmetricDifference(
            new[] { 1, 2, 3 },
            new[] { 2, 3, 4 },
            new[] { 3, 4, 5 }
        );
        foreach (var item in result)
        {
            Console.WriteLine(item); // Should print 1, 3 and 5
        }
    }
}
